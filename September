<----------------------------------------------------------------------03/09/2024-------------------------------------------------------------------------------->
                                                  53. Maximum Subarray on leetcode(Using Kadane's algo):
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        int curr=nums[0];
        for(int i=0;i<n;i++)
        {
            sum=sum+nums[i];
            if (sum>curr)
            {
                curr = sum;
            }
            if(sum<0)
            {
                sum=0;
            }
        }
        return curr;
    }
};
<----------------------------------------------------------------------04/09/2024-------------------------------------------------------------------------------->
                                                              11. Container With Most Water
class Solution {
public:
    int maxArea(vector<int>& height) {
        int max=0,l=0,r=height.size()-1,cur=0;
        while(l<r)
        {
            if(height[l]<height[r])
            {
                cur=(r-l)*height[l];
                l++;
            }
            else
            {
                cur=(r-l)*height[r];
                r--;
            }
            if(cur>max)
            {
                max=cur;
            }
        }
        return max;
    }
};
<----------------------------------------------------------------------05/09/2024-------------------------------------------------------------------------------->
                                                                   202. Happy Number
First solution with Flyod's cycle detection algo:                         |  Second solution:
class Solution {                                                          |  class Solution {
public:                                                                   |  public:
    int sumD(int n) {                                                     |        bool isHappy(int n) {
        int s=0;                                                          |                int s=0;
        while(n!=0) {                                                     |                if(n==1)
            int r= n%10;                                                  |                return true;
            s += r*r;                                                     |                if(n<7&&n!=1)
            n = n/10;                                                     |                return false;
        }                                                                 |                while(n>0) {
        return s;                                                         |                     int r=n%10;
    }                                                                     |                     s+=r*r;
    bool isHappy(int n) {                                                 |                     n=n/10;
            int slow = sumD(n);                                           |                 }
            int fast = sumD(sumD(n));                                     |               return isHappy(s);    
            while(slow!=fast && fast!=1) {                                |             }
                slow = sumD(slow);                                        |         };
                fast = sumD(sumD(fast));                                  |
            }                                                             |
            if(fast==1) {                                                 |
                return true;                                              |
            }                                                             |
            else {                                                        |
               return false;                                              |
            }                                                             |
        }                                                                 |               
    }                                                                     |
};                                                                        |
<----------------------------------------------------------------------06/09/2024-------------------------------------------------------------------------------->
1877. Minimize Maximum Pair Sum in Array
class Solution {
public:
    int minPairSum(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int l=0,r=nums.size()-1,sum=INT_MIN;
        while(l<r) {
            int max=nums[l]+nums[r];
            if(max>sum) {
                sum=max;
            }
            l++;
            r--;
        }
        return sum;
    }
};
<----------------------------------------------------------------------06/09/2024-------------------------------------------------------------------------------->
